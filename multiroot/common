ESPS=()

BOOTS=()
BOOT_BACKINGS=()

DETACHED_LUKS=()
DETACHED_LUKS_BACKINGS=()

HEADER_TMPDIR="$(mktemp -d)"

: "${CRYPTO_HASH:=sha512}"
: "${CRYPTO_CIPHER:=aes-xts-plain64}"
: "${CRYPTO_KEYSIZE:=512}"
: "${CRYPTO_OFFSET:=0}"
: "${CRYPTO_SKIP:=}"

BOOTDEVS="DEVICES[@]" ROOTPART="-part4"
[ "${#BOOT_DEVICES[@]}" -gt 0 ] && BOOTDEVS="BOOT_DEVICES[@]" && ROOTPART="" ||:

string_join(){ local IFS="$1"; shift; echo "$*"; }

wait_for_device(){ until [ -L "${1}" ]; do sleep 3; done; }

find_dm_backing_device(){
  local i dev
  for i in $(find /sys/dev/ -name $(dmsetup table ${1} | awk '{print $7}')); do
    # find /dev/disk/* symlinks?
    dev="$(cat ${i}/uevent | awk -F= '/^DEVNAME=/ {print $NF}')"
  done
}

add_esp(){
  wait_for_device "${1}"
  mkfs.msdos -F 32 "${1}"
  ESPS+=("${1}")
}

add_luks_boot(){
  wait_for_device "${1}"
  local dm_name="$(uuidgen)"
  cryptsetup -h "${CRYPTO_HASH}" -c "${CRYPTO_CIPHER}" -s "${CRYPTO_KEYSIZE}" --type luks1 -y luksFormat "${1}"
  cryptsetup luksOpen "${1}" "${dm_name}"
  mkfs.ext4 -m 0 -i 4096 -b 4096 -E lazy_itable_init=0,lazy_journal_init=0 "/dev/mapper/${dm_name}"
  BOOT_BACKINGS+=("${1}")
  BOOTS+=("${dm_name}")
}

add_detached_luks(){
  wait_for_device "${1}"
  local dm_name="$(uuidgen)"
  local tmp_header="${HEADER_TMPDIR}/${dm_name}"
  dd if=/dev/urandom of="${tmp_header}" bs=16M count=1
  cryptsetup -h "${CRYPTO_HASH}" -c "${CRYPTO_CIPHER}" -s "${CRYPTO_KEYSIZE}" --type luks1 -y luksFormat --header "${tmp_header}" "${1}"
  cryptsetup luksOpen --header "${tmp_header}" "${1}" "${dm_name}"
  DETACHED_LUKS_BACKINGS+=("${1}")
  DETACHED_LUKS+=("${dm_name}")
}

layout_partitions(){
  local i
  wipefs -a "${!BOOTDEVS}"
  for i in "${!BOOTDEVS}"; do
    parted "${i}" \
      mklabel gpt \
      mkpart primary 1MiB 2MiB \
      mkpart primary fat32 2MiB 64MiB \
      mkpart primary 64MiB 512MiB \
      set 1 bios_grub on \
      set 2 boot on \
      set 2 esp on \
      set 3 legacy_boot on
    [ "${#BOOT_DEVICES[@]}" -le 0 ] && parted "${i}" mkpart primary 512MiB '100%' ||:
  done
}

prep_bios_uefi(){
  local i
  layout_partitions
  for i in "${!BOOTDEVS}"; do add_esp "${i}-part2"; add_luks_boot "${i}-part3"; done
  for i in "${DEVICES[@]}"; do add_detached_luks "${i}${ROOTPART}"; done
  UBUNTU_PACKAGES+=('grub-pc')
  BIOS_BOOT=1
}

prep_uefi_only(){
  layout_partitions
  local i esp_part="/dev/md/$(uuidgen)" boot_part="/dev/md/$(uuidgen)" bootdevs=("${!BOOTDEVS}")
  for i in ${!BOOTDEVS/%/-part2}; do wait_for_device "${i}"; done
  mdadm -C -l raid1 -e 1.0 -f -n "${#bootdevs[@]}" "${esp_part}" ${!BOOTDEVS/%/-part2}
  add_esp "${esp_part}"
  for i in ${!BOOTDEVS/%/-part3}; do wait_for_device "${i}"; done
  mdadm -C -l raid1 -e 1.0 -f -n "${#bootdevs[@]}" "${boot_part}" ${!BOOTDEVS/%/-part3}
  add_luks_boot "${boot_part}"
  for i in ${DEVICES[@]/%/${ROOTPART}}; do add_detached_luks "${i}"; done
  unset bootdevs
  UBUNTU_PACKAGES+=('grub-efi')
}
